package view;

import font.JFontChooser;
import java.awt.Font;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import static java.lang.System.exit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import javax.swing.event.UndoableEditEvent;
import javax.swing.event.UndoableEditListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.filechooser.FileSystemView;
import javax.swing.undo.CannotRedoException;
import javax.swing.undo.UndoManager;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author ASUS
 */
public class MenuFrame extends javax.swing.JFrame implements ActionListener{

    boolean different = true;
    boolean isANewFile = true;
    File selectedFile;
    UndoManager manager = new UndoManager();
    Clipboard clb = Toolkit.getDefaultToolkit().getSystemClipboard();
    Font curentFont = null;

    /**
     * Creates new form MenuFrame
     */
    public MenuFrame() {
        initComponents();
        setLocationRelativeTo(null);
        setTitle("My Text Editer");
        Timer time = new Timer(500, this);
        time.start();
    }
    
     @Override
    public void actionPerformed(ActionEvent e) {
        if(txtContent.getText().equals("")){
            mniSave.setEnabled(false);
            mniSaveAs.setEnabled(false);
            mniSelectAll.setEnabled(false);
            mniCopy.setEnabled(false);
            mniCut.setEnabled(false);
            mniPaste.setEnabled(false);
            mniUndo.setEnabled(false);
            mniRedo.setEnabled(false);
            mniFind.setEnabled(false);
            mniReplace.setEnabled(false);
            mniChangeFont.setEnabled(false);
        } else {
            mniSave.setEnabled(true);
            mniSaveAs.setEnabled(true);
            mniSelectAll.setEnabled(true);
            mniCopy.setEnabled(true);
            mniCut.setEnabled(true);
            mniPaste.setEnabled(true);
            mniUndo.setEnabled(true);
            mniRedo.setEnabled(true);
            mniFind.setEnabled(true);
            mniReplace.setEnabled(true);
            mniChangeFont.setEnabled(true);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtContent = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        mnFile = new javax.swing.JMenu();
        mniNew = new javax.swing.JMenuItem();
        mniOpen = new javax.swing.JMenuItem();
        mniSave = new javax.swing.JMenuItem();
        mniSaveAs = new javax.swing.JMenuItem();
        mniExit = new javax.swing.JMenuItem();
        mnEdit = new javax.swing.JMenu();
        mniSelectAll = new javax.swing.JMenuItem();
        mniCut = new javax.swing.JMenuItem();
        mniCopy = new javax.swing.JMenuItem();
        mniPaste = new javax.swing.JMenuItem();
        mniUndo = new javax.swing.JMenuItem();
        mniRedo = new javax.swing.JMenuItem();
        mniFind = new javax.swing.JMenuItem();
        mniReplace = new javax.swing.JMenuItem();
        mniChangeFont = new javax.swing.JMenuItem();

        jMenuItem2.setText("jMenuItem2");

        jMenuItem5.setText("jMenuItem5");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtContent.setColumns(20);
        txtContent.setRows(5);
        jScrollPane1.setViewportView(txtContent);

        jMenuBar1.setAutoscrolls(true);

        mnFile.setText("File");

        mniNew.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        mniNew.setText("New");
        mniNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniNewActionPerformed(evt);
            }
        });
        mnFile.add(mniNew);

        mniOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        mniOpen.setText("Open");
        mniOpen.setToolTipText("");
        mniOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniOpenActionPerformed(evt);
            }
        });
        mnFile.add(mniOpen);

        mniSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        mniSave.setText("Save");
        mniSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniSaveActionPerformed(evt);
            }
        });
        mnFile.add(mniSave);

        mniSaveAs.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        mniSaveAs.setText("Save As");
        mniSaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniSaveAsActionPerformed(evt);
            }
        });
        mnFile.add(mniSaveAs);

        mniExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        mniExit.setText("Exit");
        mniExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniExitActionPerformed(evt);
            }
        });
        mnFile.add(mniExit);

        jMenuBar1.add(mnFile);

        mnEdit.setText("Edit");

        mniSelectAll.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        mniSelectAll.setText("Select All");
        mniSelectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniSelectAllActionPerformed(evt);
            }
        });
        mnEdit.add(mniSelectAll);

        mniCut.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        mniCut.setText("Cut");
        mniCut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniCutActionPerformed(evt);
            }
        });
        mnEdit.add(mniCut);

        mniCopy.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        mniCopy.setText("Copy");
        mniCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniCopyActionPerformed(evt);
            }
        });
        mnEdit.add(mniCopy);

        mniPaste.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        mniPaste.setText("Paste");
        mniPaste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniPasteActionPerformed(evt);
            }
        });
        mnEdit.add(mniPaste);

        mniUndo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        mniUndo.setText("Undo");
        mniUndo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniUndoActionPerformed(evt);
            }
        });
        mnEdit.add(mniUndo);

        mniRedo.setText("Redo");
        mniRedo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniRedoActionPerformed(evt);
            }
        });
        mnEdit.add(mniRedo);

        mniFind.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_MASK));
        mniFind.setText("Find");
        mniFind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniFindActionPerformed(evt);
            }
        });
        mnEdit.add(mniFind);

        mniReplace.setText("Replace");
        mniReplace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniReplaceActionPerformed(evt);
            }
        });
        mnEdit.add(mniReplace);

        mniChangeFont.setText("Change font");
        mniChangeFont.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniChangeFontActionPerformed(evt);
            }
        });
        mnEdit.add(mniChangeFont);

        jMenuBar1.add(mnEdit);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mniOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniOpenActionPerformed
        // TODO add your handling code here:
        JFileChooser jfc = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
        try {
            jfc.setDialogTitle("Select the text file to edit");
            jfc.setAcceptAllFileFilterUsed(false);
            FileNameExtensionFilter filter = new FileNameExtensionFilter("text file", "txt", "docx");
            jfc.addChoosableFileFilter(filter);
            int returnValue = jfc.showOpenDialog(null);
            if (returnValue == JFileChooser.APPROVE_OPTION) {
                selectedFile = jfc.getSelectedFile();
                String fileName = selectedFile.getAbsolutePath().substring(selectedFile.getAbsolutePath().lastIndexOf("\\")+1,selectedFile.getAbsolutePath().lastIndexOf("."));
                setTitle(fileName);
                isANewFile = false;
                FileReader fr = new FileReader(selectedFile);
                BufferedReader br = new BufferedReader(fr);
                String output = "", temp;
                while ((temp = br.readLine()) != null) {
                    output += temp + "\n";
                }
                txtContent.setText(output);
                br.close();
                fr.close();
            }
        } catch (Exception E) {
            JOptionPane.showMessageDialog(this, E);
        }
    }//GEN-LAST:event_mniOpenActionPerformed

    private void mniFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniFindActionPerformed
        try {
            String findStringInput = JOptionPane.showInputDialog("Input the text you want to find");
            String documentString = txtContent.getText();
            int index = documentString.indexOf(findStringInput);
            int legth = findStringInput.length();
            if (index != -1) {
                txtContent.select(index, index + legth);
            } else {
                JOptionPane.showMessageDialog(this, "This text: '" + findStringInput + "' can't found!");
            }
        } catch (NullPointerException e) {

        }
    }//GEN-LAST:event_mniFindActionPerformed

    private void mniExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniExitActionPerformed
        // TODO add your handling code here:
        exit(0);
    }//GEN-LAST:event_mniExitActionPerformed

    private void mniNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniNewActionPerformed
        // TODO add your handling code here:
        txtContent.setText("");
        isANewFile = true;
    }//GEN-LAST:event_mniNewActionPerformed

    private void mniSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniSaveActionPerformed
        // TODO add your handling code here:
        if (isANewFile) {
            String fileName;
            JFileChooser jfc = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
            jfc.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
            int returnvalue = jfc.showSaveDialog(null);
            if (returnvalue == JFileChooser.SAVE_DIALOG) {
                String directory = jfc.getSelectedFile().getPath();
                do {
                    fileName = JOptionPane.showInputDialog("Input the name of file");
                    if (fileName.equals("") || fileName == null) {
                        JOptionPane.showMessageDialog(this, "The file name can't be null");
                    }
                } while (fileName == null || fileName.equals(""));
                selectedFile = new File(directory + "\\" + fileName + ".txt");
                setTitle(fileName);
                try {
                    selectedFile.createNewFile();
                    FileWriter fw = new FileWriter(selectedFile);
                    fw.write(txtContent.getText());
                    fw.close();
                    isANewFile = false;
                } catch (IOException E) {
                    System.out.println("Save file: "+E.getMessage());
                    String message = E.getMessage();
                    if (message.contains("cannot find the path")){
                        JOptionPane.showMessageDialog(this, "Invalid directory!", "Save file process: ", JOptionPane.ERROR_MESSAGE);
                    }
                }
            }
        } else {
            try {
                    FileWriter fw = new FileWriter(selectedFile);
                    fw.write(txtContent.getText());
                    fw.close();
            } catch (Exception E) {
                JOptionPane.showMessageDialog(this, E);
            }
        }
    }//GEN-LAST:event_mniSaveActionPerformed

    private void mniSaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniSaveAsActionPerformed
        // TODO add your handling code here:
        isANewFile = true;
        mniSaveActionPerformed(evt);
    }//GEN-LAST:event_mniSaveAsActionPerformed

    private void mniSelectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniSelectAllActionPerformed
        // TODO add your handling code here:
        txtContent.selectAll();
    }//GEN-LAST:event_mniSelectAllActionPerformed

    private void mniCutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniCutActionPerformed
        // TODO add your handling code here:
        StringSelection ss = new StringSelection(txtContent.getSelectedText());
        clb.setContents(ss, null);
        txtContent.replaceRange("", txtContent.getSelectionStart(), txtContent.getSelectionEnd());
    }//GEN-LAST:event_mniCutActionPerformed

    private void mniCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniCopyActionPerformed
        // TODO add your handling code here:
        StringSelection ss = new StringSelection(txtContent.getSelectedText());
        clb.setContents(ss, null);
    }//GEN-LAST:event_mniCopyActionPerformed

    private void mniPasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniPasteActionPerformed
        // TODO add your handling code here:
        Transferable tfr = Toolkit.getDefaultToolkit().getSystemClipboard().getContents(this);
        try {
            if (tfr != null && tfr.isDataFlavorSupported(DataFlavor.stringFlavor)) {
                String text = (String) tfr.getTransferData(DataFlavor.stringFlavor);
                txtContent.replaceRange(text, txtContent.getSelectionStart(), txtContent.getSelectionEnd());
            }
        } catch (UnsupportedFlavorException ex) {
            Logger.getLogger(MenuFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(MenuFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_mniPasteActionPerformed

    private void mniUndoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniUndoActionPerformed
        // TODO add your handling code here:
        manager.undo();
    }//GEN-LAST:event_mniUndoActionPerformed

    private void mniRedoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniRedoActionPerformed
        // TODO add your handling code here:
        try {
            manager.redo();
            txtContent.getDocument().addUndoableEditListener(new UndoableEditListener() {
                @Override
                public void undoableEditHappened(UndoableEditEvent arg0) {
                    manager.addEdit(arg0.getEdit());
                }
            });
        } catch (CannotRedoException e) {

        }
    }//GEN-LAST:event_mniRedoActionPerformed

    private void mniReplaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniReplaceActionPerformed
        try {
            if ((txtContent.getSelectionEnd() - txtContent.getSelectionStart()) > 0) {
                String replaceString = JOptionPane.showInputDialog("Enter the replace string");
                txtContent.replaceRange(replaceString, txtContent.getSelectionStart(), txtContent.getSelectionEnd());
            } else {
                JOptionPane.showMessageDialog(this, "Please select the text you want to replace");
            }
        } catch (NullPointerException e) {

        }
    }//GEN-LAST:event_mniReplaceActionPerformed

    private void mniChangeFontActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniChangeFontActionPerformed
        JFontChooser fontchooser = new JFontChooser();
        if (fontchooser.showDialog(null) == JFontChooser.OK_OPTION){
             curentFont = fontchooser.getSelectedFont();
             txtContent.setFont(curentFont);
        }
    }//GEN-LAST:event_mniChangeFontActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MenuFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MenuFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MenuFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MenuFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MenuFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenu mnEdit;
    private javax.swing.JMenu mnFile;
    private javax.swing.JMenuItem mniChangeFont;
    private javax.swing.JMenuItem mniCopy;
    private javax.swing.JMenuItem mniCut;
    private javax.swing.JMenuItem mniExit;
    private javax.swing.JMenuItem mniFind;
    private javax.swing.JMenuItem mniNew;
    private javax.swing.JMenuItem mniOpen;
    private javax.swing.JMenuItem mniPaste;
    private javax.swing.JMenuItem mniRedo;
    private javax.swing.JMenuItem mniReplace;
    private javax.swing.JMenuItem mniSave;
    private javax.swing.JMenuItem mniSaveAs;
    private javax.swing.JMenuItem mniSelectAll;
    private javax.swing.JMenuItem mniUndo;
    private javax.swing.JTextArea txtContent;
    // End of variables declaration//GEN-END:variables


}
